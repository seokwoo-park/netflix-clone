{"version":3,"sources":["Row.js","request.js","axios.js","Banner.js","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","axios","get","request","data","results","fetchData","className","map","movie","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","src","poster_path","backdrop_path","alt","id","original_name","str","overview","n","length","substr","videoId","opts","height","width","playerVars","autoplay","API_KEY","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchWarMovies","fetchFantasyMovies","instance","create","baseURL","Banner","setMovie","Request","Math","floor","random","style","backgroundSize","backgroundImage","backgroundPosition","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cc24efd4.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport axios from 'axios';\r\nimport './Row.css';\r\nimport YouTube from 'react-youtube';\r\nimport movieTrailer from 'movie-trailer';\r\n\r\nconst img_url = \"https://image.tmdb.org/t/p/original/\";\r\n\r\nfunction Row ({title,fetchUrl, isLargeRow}){\r\n\r\n    const [movies,setMovies] = useState([]);\r\n    const [trailerUrl,setTrailerUrl] = useState('');\r\n\r\n    useEffect(()=>{\r\n        async function fetchData (){\r\n            const request = await axios.get(`https://api.themoviedb.org/3${fetchUrl}`);\r\n            setMovies(request.data.results);\r\n            return request\r\n        }\r\n        fetchData();\r\n    },[fetchUrl]);\r\n\r\n    const opts = {\r\n        height : \"390\",\r\n        width : \"100%\",\r\n        playerVars: {\r\n            autoplay :1,\r\n        }\r\n    }\r\n    \r\n\r\n    const handleClick = (movie) => {\r\n        if (trailerUrl) {\r\n            setTrailerUrl('');\r\n        } else {\r\n            movieTrailer(movie?.name||\"\")\r\n            .then ((url) => {\r\n                const urlParams = new URLSearchParams(new URL(url).search);\r\n               setTrailerUrl(urlParams.get('v'));\r\n            })\r\n            .catch(error => console.log(error));\r\n        }\r\n    }\r\n\r\n    function truncate(str, n) {\r\n        return str?.length > n ?str.substr(0, n - 1) + \"...\" : str;\r\n    }\r\n\r\n    return(\r\n        <div className=\"row\">\r\n            <h2>{title}</h2>\r\n            <div className=\"row_posters\">\r\n                {movies.map((movie,a) => {\r\n                    return(\r\n                    <div key={a+1} className=\"row_contents\">\r\n                    <img \r\n                        className={`row_poster ${isLargeRow && \"row_posterLarge\"}`}\r\n                        onClick={(()=>handleClick(movie))}\r\n                        key={movie.id}\r\n                        src={`${img_url}${isLargeRow? movie.poster_path : movie.backdrop_path}`} \r\n                        alt={movie.name}/> \r\n                        <h1 key={a+2} className=\"row_title\">{movie?.name || movie?.title || movie?.original_name}</h1>\r\n                        <div key={a+3} className={`row_summary ${isLargeRow && \"row_summaryLarge\"}`}>{truncate(movie?.overview, 151)}</div>\r\n                    </div>\r\n                    )\r\n                })}\r\n            </div>\r\n           {trailerUrl&&<YouTube videoId={trailerUrl} opts={opts}/>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row","const API_KEY = '53134d5dd36f0f78b37dc74190e75f0c';\r\n\r\nconst request = {\r\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n    fetchNetflixOriginals : `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchWarMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10752`,\r\n    fetchFantasyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=14`,\r\n\r\n}\r\n\r\nexport default request;","import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://api.themoviedb.org/3\"\r\n});\r\n\r\nexport default instance;","import { useEffect, useState } from \"react\"\r\nimport axios from './axios';\r\nimport Request from './request';\r\nimport './banner.css';\r\nimport YouTube from 'react-youtube';\r\nimport movieTrailer from 'movie-trailer';\r\n\r\nfunction Banner (){\r\n\r\n    const [movie, setMovie] = useState ([]);\r\n    const [trailerUrl,setTrailerUrl] = useState('');\r\n\r\n    useEffect(()=>{\r\n        async function fetchData(){\r\n            const request = await axios.get(`https://api.themoviedb.org/3${Request.fetchNetflixOriginals}`); \r\n            setMovie(\r\n                request.data.results[\r\n                    Math.floor(Math.random() * request.data.results.length)\r\n                ]\r\n            )\r\n            return request\r\n        }\r\n        fetchData();\r\n    },[]);\r\n\r\n    function truncate(str, n) {\r\n        return str?.length > n ?str.substr(0, n - 1) + \"...\" : str;\r\n    }\r\n\r\n    const opts = {\r\n        height : \"400\",\r\n        width : \"100%\",\r\n        playerVars: {\r\n            autoplay :1,\r\n        }\r\n    }\r\n\r\n    const handleClick = (movie) => {\r\n        if (trailerUrl) {\r\n            setTrailerUrl('');\r\n        } else {\r\n            movieTrailer(movie?.name||\"\")\r\n            .then ((url) => {\r\n                const urlParams = new URLSearchParams(new URL(url).search);\r\n               setTrailerUrl(urlParams.get('v'));\r\n            })\r\n            .catch(error => console.log(error));\r\n        }\r\n    }\r\n\r\n    return(\r\n        <header className=\"banner\"\r\n        style={{\r\n            backgroundSize: \"cover\",\r\n            backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\r\n            backgroundPosition: \"top center\"}}>\r\n            <div className=\"banner_contents\">\r\n                <h1 className=\"banner_title\">\r\n                 {movie?.title||movie?.name||movie?.original_name}\r\n                </h1>\r\n\r\n                <div className=\"banner_buttons\">\r\n                    <button className=\"banner_button\" onClick={(()=>handleClick(movie))}>Play</button>\r\n                    <button className=\"banner_button\">My List</button>\r\n                </div>\r\n                \r\n                <div className=\"banner_trailer\">\r\n                    {trailerUrl&&<YouTube videoId={trailerUrl} opts={opts}/>}\r\n                </div>\r\n                <h1 className=\"banner_desc\">\r\n                    {truncate(movie?.overview, 151)}\r\n                </h1>\r\n\r\n            </div>\r\n                <div className=\"banner_fadeBottom\"></div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Banner;","import { useEffect, useState } from 'react';\r\nimport './Nav.css';\r\n\r\n\r\nfunction Nav (){\r\n\r\n    const [show,handleShow] = useState(false);\r\n\r\n    useEffect(()=>{\r\n        window.addEventListener(\"scroll\",()=>{\r\n            if (window.scrollY > 100) {\r\n            handleShow(true);\r\n            } else { handleShow(false);\r\n            }});\r\n            return ()=> {\r\n                window.removeEventListener(\"scroll\");\r\n            }\r\n    },[]);\r\n\r\n    return(\r\n        <div className={`nav ${show && \"nav_black\"}`}>\r\n            <img className=\"nav_logo\"\r\n            src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/799px-Netflix_2015_logo.svg.png\"\r\n            alt=\"Netflix Logo\"\r\n            />\r\n            <img\r\n            className=\"nav_avatar\"\r\n            src=\"https://pbs.twimg.com/profile_images/1240119990411550720/hBEe3tdn_400x400.png\"\r\n            alt=\"Netflix Avatar\"\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav;","import './App.css';\nimport Row from './Row';\nimport request from './request';\nimport Banner from './Banner.js';\nimport Nav from './Nav.js'\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Nav/>\n      <Banner/>\n      <Row title = \"NETFLIX ORIGINALS\"\n       fetchUrl={request.fetchNetflixOriginals}\n       isLargeRow={true}/>\n      <Row title = \"Trending Now\" fetchUrl={request.fetchTrending} />\n      <Row title = \"Top Rated\" fetchUrl={request.fetchTopRated} />\n      <Row title = \"Action Movies\" fetchUrl={request.fetchActionMovies} />\n      <Row title = \"Comedy Movies\" fetchUrl={request.fetchComedyMovies} />\n      <Row title = \"Horror Movies\" fetchUrl={request.fetchHorrorMovies} />\n      <Row title = \"War Movies\" fetchUrl={request.fetchWarMovies} />\n      <Row title = \"Fantasy Movies\" fetchUrl={request.fetchFantasyMovies} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}